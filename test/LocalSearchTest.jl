#=
@testset "neighbors_tests" begin
    p = generateRandomPartitions(10,5,1)[1]
    display(p)
    sample = getAdjacentSample(p, 10, 5, 10)
    display(sample)

    p2 = generateRandomPartitions(5,3,1)[1]
    display(p2)
    neighbors = getAdjacentPartitions(p2, 5, 3)
    display(neighbors)
    G = gnp_graph(5, p=.5)
    x = rand(5)
    p3 = iterativeImprovement(G, p2, 1, x, linear_model, 10, 0.1)
    display(p3)
end

@testset "conversion_tests" begin
    p = generateRandomPartitions(10,5,1)[1]
    display(p)
    P = dict_to_matrix(p, 10, 5)
    display(P)
    p2 = matrix_to_dict(P, 10, 5)
    display(p2)
end
=#
#=
@testset "genetic_tests" begin
    p1 = generateRandomPartitions(10,5,1)[1]
    p2 = generateRandomPartitions(10,5,1)[1]
    pc = supernodeBucketCross(p1, p2, 10, 5)
    println("Parent 1: ", p1)
    println("Parent 2: ", p2)
    println("Child: ", pc)

    pcm = randomWalkMutate(pc, 10, 5, 0.75)
    println("Mutant Child: ", pcm)

    gen1 = generateRandomPartitions(100, 50, 512)
    x = rand(100)
    GNP = gnp_graph(100)

    @time gen3 = geneticImprovement(GNP, gen1, 16, 0.9, x, linear_model, 10, 0.1)
    gen1_loss = 0
    for i = 1:512
        gen1_loss += getLoss(GNP, gen1[i], x, linear_model, 10, 0.1)
    end
    gen3_loss = 0
    for i = 1:512
        gen3_loss += getLoss(GNP, gen3[i], x, linear_model, 10, 0.1)
    end
    println("Avg Loss Gen1: ", gen1_loss/512)
    println("Avg Loss Gen3: ", gen3_loss/512)
end
=#

@testset "findLocalMinimum test" begin
    display(findLocalMinimum("data/visualization_data/PARTtest07-06_11-07-05.csv", 0.75))
    display(findLocalMinimum("data/visualization_data/PARTtest07-06_11-07-05.csv", 0.75))
    display(findLocalMinimum("data/visualization_data/PARTtest07-06_11-07-05.csv", 0.75))
    display(findLocalMinimum("data/visualization_data/PARTtest07-06_11-07-05.csv", 0.75, startingPartition ="Dict{Integer, Integer}(56 => 57, 35 => 55, 110 => 33, 60 => 83, 220 => 38, 30 => 34, 6 => 77, 67 => 13, 234 => 19, 215 => 88, 219 => 14, 73 => 1, 272 => 19, 182 => 89, 164 => 13, 115 => 33, 153 => 17, 112 => 49, 185 => 54, 64 => 55, 186 => 93, 251 => 81, 253 => 4, 267 => 42, 90 => 20, 139 => 5, 4 => 36, 13 => 89, 86 => 66, 168 => 62, 207 => 78, 263 => 32, 104 => 52, 242 => 63, 183 => 43, 224 => 89, 52 => 78, 177 => 82, 12 => 1, 179 => 95, 75 => 17, 23 => 74, 111 => 59, 264 => 63, 41 => 96, 43 => 59, 11 => 32, 68 => 62, 69 => 15, 171 => 25, 300 => 15, 82 => 32, 85 => 69, 130 => 24, 119 => 81, 125 => 22, 39 => 69, 77 => 45, 216 => 13, 126 => 79, 108 => 6, 71 => 87, 172 => 43, 66 => 19, 103 => 53, 156 => 72, 280 => 30, 59 => 2, 208 => 81, 2 => 90, 10 => 83, 27 => 8, 26 => 81, 124 => 69, 211 => 91, 261 => 25, 144 => 49, 127 => 38, 116 => 1, 100 => 77, 257 => 18, 273 => 92, 79 => 71, 200 => 98, 20 => 48, 81 => 57, 195 => 41, 230 => 29, 279 => 8, 290 => 38, 141 => 37, 278 => 82, 187 => 36, 213 => 58, 135 => 80, 9 => 1, 189 => 35, 227 => 100, 294 => 23, 138 => 63, 222 => 30, 109 => 71, 161 => 59, 107 => 86, 46 => 88, 276 => 2, 249 => 97, 295 => 19, 57 => 17, 152 => 8, 247 => 58, 241 => 53, 170 => 1, 88 => 91, 129 => 51, 209 => 88, 236 => 13, 120 => 39, 238 => 85, 250 => 29, 78 => 17, 260 => 62, 297 => 56, 133 => 56, 72 => 7, 258 => 22, 24 => 75, 8 => 77, 184 => 52, 37 => 8, 1 => 97, 137 => 2, 22 => 49, 83 => 94, 154 => 20, 190 => 48, 201 => 77, 252 => 6, 99 => 16, 121 => 74, 206 => 64, 237 => 61, 281 => 67, 14 => 47, 288 => 41, 270 => 54, 299 => 76, 33 => 31, 40 => 39, 113 => 25, 231 => 66, 245 => 40, 174 => 100, 254 => 4, 283 => 51, 165 => 69, 142 => 98, 269 => 85, 5 => 75, 55 => 4, 114 => 84, 123 => 59, 265 => 28, 268 => 70, 32 => 81, 136 => 50, 117 => 6, 45 => 11, 145 => 52, 197 => 39, 282 => 92, 233 => 68, 196 => 4, 262 => 70, 275 => 19, 210 => 21, 151 => 84, 239 => 6, 54 => 7, 63 => 30, 191 => 29, 91 => 7, 62 => 40, 205 => 55, 244 => 93, 158 => 9, 150 => 29, 176 => 9, 218 => 19, 122 => 51, 58 => 1, 199 => 52, 28 => 70, 173 => 49, 148 => 15, 256 => 20, 188 => 46, 92 => 92, 277 => 6, 36 => 30, 98 => 56, 235 => 12, 204 => 70, 118 => 25, 162 => 65, 84 => 98, 7 => 59, 25 => 29, 95 => 32, 203 => 35, 292 => 54, 76 => 82, 232 => 81, 34 => 19, 50 => 9, 93 => 11, 243 => 17, 296 => 40, 18 => 90, 194 => 66, 240 => 67, 147 => 71, 42 => 21, 87 => 29, 132 => 7, 140 => 64, 157 => 53, 167 => 88, 169 => 5, 202 => 20, 16 => 3, 248 => 100, 287 => 54, 180 => 61, 255 => 52, 160 => 85, 19 => 53, 289 => 30, 49 => 28, 291 => 13, 44 => 44, 266 => 99, 31 => 92, 217 => 27, 146 => 75, 74 => 68, 106 => 32, 61 => 38, 29 => 50, 94 => 22, 212 => 38, 225 => 10, 228 => 3, 102 => 59, 128 => 41, 159 => 49, 70 => 76, 259 => 6, 21 => 78, 193 => 33, 38 => 59, 163 => 70, 229 => 78, 131 => 46, 226 => 59, 192 => 58, 101 => 11, 105 => 27, 223 => 94, 221 => 63, 285 => 79, 17 => 62, 53 => 44, 271 => 73, 47 => 2, 175 => 8, 166 => 40, 89 => 80, 198 => 63, 214 => 71, 3 => 79, 80 => 86, 96 => 64, 51 => 24, 178 => 65, 286 => 39, 274 => 99, 149 => 54, 155 => 19, 181 => 52, 246 => 99, 143 => 79, 48 => 31, 15 => 60, 65 => 48, 97 => 77, 293 => 26, 284 => 45, 298 => 6, 134 => 47)"))
    display(findLocalMinimum("data/visualization_data/PARTtest07-06_11-07-05.csv", 3, startingPartition ="Dict{Integer, Integer}(56 => 57, 35 => 55, 110 => 33, 60 => 83, 220 => 38, 30 => 34, 6 => 77, 67 => 13, 234 => 19, 215 => 88, 219 => 14, 73 => 1, 272 => 19, 182 => 89, 164 => 13, 115 => 33, 153 => 17, 112 => 49, 185 => 54, 64 => 55, 186 => 93, 251 => 81, 253 => 4, 267 => 42, 90 => 20, 139 => 5, 4 => 36, 13 => 89, 86 => 66, 168 => 62, 207 => 78, 263 => 32, 104 => 52, 242 => 63, 183 => 43, 224 => 89, 52 => 78, 177 => 82, 12 => 1, 179 => 95, 75 => 17, 23 => 74, 111 => 59, 264 => 63, 41 => 96, 43 => 59, 11 => 32, 68 => 62, 69 => 15, 171 => 25, 300 => 15, 82 => 32, 85 => 69, 130 => 24, 119 => 81, 125 => 22, 39 => 69, 77 => 45, 216 => 13, 126 => 79, 108 => 6, 71 => 87, 172 => 43, 66 => 19, 103 => 53, 156 => 72, 280 => 30, 59 => 2, 208 => 81, 2 => 90, 10 => 83, 27 => 8, 26 => 81, 124 => 69, 211 => 91, 261 => 25, 144 => 49, 127 => 38, 116 => 1, 100 => 77, 257 => 18, 273 => 92, 79 => 71, 200 => 98, 20 => 48, 81 => 57, 195 => 41, 230 => 29, 279 => 8, 290 => 38, 141 => 37, 278 => 82, 187 => 36, 213 => 58, 135 => 80, 9 => 1, 189 => 35, 227 => 100, 294 => 23, 138 => 63, 222 => 30, 109 => 71, 161 => 59, 107 => 86, 46 => 88, 276 => 2, 249 => 97, 295 => 19, 57 => 17, 152 => 8, 247 => 58, 241 => 53, 170 => 1, 88 => 91, 129 => 51, 209 => 88, 236 => 13, 120 => 39, 238 => 85, 250 => 29, 78 => 17, 260 => 62, 297 => 56, 133 => 56, 72 => 7, 258 => 22, 24 => 75, 8 => 77, 184 => 52, 37 => 8, 1 => 97, 137 => 2, 22 => 49, 83 => 94, 154 => 20, 190 => 48, 201 => 77, 252 => 6, 99 => 16, 121 => 74, 206 => 64, 237 => 61, 281 => 67, 14 => 47, 288 => 41, 270 => 54, 299 => 76, 33 => 31, 40 => 39, 113 => 25, 231 => 66, 245 => 40, 174 => 100, 254 => 4, 283 => 51, 165 => 69, 142 => 98, 269 => 85, 5 => 75, 55 => 4, 114 => 84, 123 => 59, 265 => 28, 268 => 70, 32 => 81, 136 => 50, 117 => 6, 45 => 11, 145 => 52, 197 => 39, 282 => 92, 233 => 68, 196 => 4, 262 => 70, 275 => 19, 210 => 21, 151 => 84, 239 => 6, 54 => 7, 63 => 30, 191 => 29, 91 => 7, 62 => 40, 205 => 55, 244 => 93, 158 => 9, 150 => 29, 176 => 9, 218 => 19, 122 => 51, 58 => 1, 199 => 52, 28 => 70, 173 => 49, 148 => 15, 256 => 20, 188 => 46, 92 => 92, 277 => 6, 36 => 30, 98 => 56, 235 => 12, 204 => 70, 118 => 25, 162 => 65, 84 => 98, 7 => 59, 25 => 29, 95 => 32, 203 => 35, 292 => 54, 76 => 82, 232 => 81, 34 => 19, 50 => 9, 93 => 11, 243 => 17, 296 => 40, 18 => 90, 194 => 66, 240 => 67, 147 => 71, 42 => 21, 87 => 29, 132 => 7, 140 => 64, 157 => 53, 167 => 88, 169 => 5, 202 => 20, 16 => 3, 248 => 100, 287 => 54, 180 => 61, 255 => 52, 160 => 85, 19 => 53, 289 => 30, 49 => 28, 291 => 13, 44 => 44, 266 => 99, 31 => 92, 217 => 27, 146 => 75, 74 => 68, 106 => 32, 61 => 38, 29 => 50, 94 => 22, 212 => 38, 225 => 10, 228 => 3, 102 => 59, 128 => 41, 159 => 49, 70 => 76, 259 => 6, 21 => 78, 193 => 33, 38 => 59, 163 => 70, 229 => 78, 131 => 46, 226 => 59, 192 => 58, 101 => 11, 105 => 27, 223 => 94, 221 => 63, 285 => 79, 17 => 62, 53 => 44, 271 => 73, 47 => 2, 175 => 8, 166 => 40, 89 => 80, 198 => 63, 214 => 71, 3 => 79, 80 => 86, 96 => 64, 51 => 24, 178 => 65, 286 => 39, 274 => 99, 149 => 54, 155 => 19, 181 => 52, 246 => 99, 143 => 79, 48 => 31, 15 => 60, 65 => 48, 97 => 77, 293 => 26, 284 => 45, 298 => 6, 134 => 47)"))
end